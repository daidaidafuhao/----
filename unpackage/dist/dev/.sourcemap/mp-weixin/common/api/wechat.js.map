{"version":3,"file":"wechat.js","sources":["common/api/wechat.js"],"sourcesContent":["/**\n * 微信相关API工具类\n */\n\n// 检查是否微信小程序环境\nexport function isWechatMP() {\n    // #ifdef MP-WEIXIN\n    return true;\n    // #endif\n    \n    // #ifndef MP-WEIXIN\n    return false;\n    // #endif\n}\n\n// 获取微信登录状态\nexport function getWechatLoginState() {\n    try {\n        const openid = uni.getStorageSync('openid');\n        const userInfo = uni.getStorageSync('userInfo');\n        \n        return {\n            isLoggedIn: !!openid,\n            openid: openid || '',\n            userInfo: userInfo || null\n        };\n    } catch (e) {\n        console.error('获取登录状态失败', e);\n        return {\n            isLoggedIn: false,\n            openid: '',\n            userInfo: null\n        };\n    }\n}\n\n// 微信登录\nexport function wechatLogin() {\n    return new Promise((resolve, reject) => {\n        try {\n            // #ifdef MP-WEIXIN\n            uni.login({\n                provider: 'weixin',\n                success: (loginRes) => {\n                    console.log(loginRes);\n                    \n                    try {\n                        // 获取openid\n                        getWechatOpenid(loginRes.code)\n                            .then(openidRes => {\n                                try {\n                                    // 获取用户信息\n                                    uni.getUserProfile({\n                                        desc: '用于完善会员资料',\n                                        success: (userInfoRes) => {\n                                            try {\n                                                // 保存用户信息\n                                                saveWechatUserInfo(openidRes.openid, userInfoRes.userInfo)\n                                                    .then(saveRes => {\n                                                        // 直接使用wx-login返回的isAdmin状态\n                                                        resolve({\n                                                            openid: openidRes.openid,\n                                                            userInfo: userInfoRes.userInfo,\n                                                            userId: saveRes.userId,\n                                                            isAdmin: openidRes.isAdmin || false\n                                                        });\n                                                    })\n                                                    .catch(err => {\n                                                        console.error('保存用户信息失败', err);\n                                                        reject(err instanceof Error ? err : new Error('保存用户信息失败'));\n                                                    });\n                                            } catch (e) {\n                                                console.error('处理用户信息出错', e);\n                                                reject(e instanceof Error ? e : new Error('处理用户信息出错'));\n                                            }\n                                        },\n                                        fail: (err) => {\n                                            console.error('获取用户信息失败', err);\n                                            reject(err instanceof Error ? err : new Error('获取用户信息失败'));\n                                        }\n                                    });\n                                } catch (e) {\n                                    console.error('获取用户信息出错', e);\n                                    reject(e instanceof Error ? e : new Error('获取用户信息出错'));\n                                }\n                            })\n                            .catch(err => {\n                                console.error('获取openid失败', err);\n                                reject(err instanceof Error ? err : new Error('获取openid失败'));\n                            });\n                    } catch (e) {\n                        console.error('调用登录方法出错', e);\n                        reject(e instanceof Error ? e : new Error('调用登录方法出错'));\n                    }\n                },\n                fail: (err) => {\n                    console.error('微信登录失败', err);\n                    reject(err instanceof Error ? err : new Error('微信登录失败'));\n                }\n            });\n            // #endif\n            \n            // #ifndef MP-WEIXIN\n            reject(new Error('仅支持微信小程序环境'));\n            // #endif\n        } catch (e) {\n            console.error('微信登录过程出错', e);\n            reject(e instanceof Error ? e : new Error('微信登录过程出错'));\n        }\n    });\n}\n\n// 获取微信OpenID\nfunction getWechatOpenid(code) {\n    return new Promise((resolve, reject) => {\n        try {\n            console.log(code);\n            \n            uni.request({\n                url: 'https://97fca9f2-41f6-449f-a35e-3f135d4c3875.bspapp.com/http/user-center',\n                method: 'POST',\n                data: {\n                    action: 'loginByWeixin',\n                    params: {\n                        code: code,\n                        platform: 'mp-weixin'\n                    }\n                },\n                success: (res) => {\n                    console.log(res);\n                    \n                    try {\n                        if (!res.data || res.data.code !== 0) {\n                            const errMsg = (res.data && res.data.errMsg) ? res.data.errMsg : '获取openid失败';\n                            reject(new Error(errMsg));\n                            return;\n                        }\n                        \n                        // 存储openid\n                        uni.setStorageSync('openid', res.data.openid);\n                        resolve({\n                            openid: res.data.openid,\n                            isAdmin: res.data.isAdmin\n                        });\n                    } catch (e) {\n                        console.error('处理获取openid响应出错', e);\n                        reject(e instanceof Error ? e : new Error('处理获取openid响应出错'));\n                    }\n                },\n                fail: (err) => {\n                    console.error('请求获取openid失败', err);\n                    reject(err instanceof Error ? err : new Error('请求获取openid失败'));\n                }\n            });\n        } catch (e) {\n            console.error('发送获取openid请求出错', e);\n            reject(e instanceof Error ? e : new Error('发送获取openid请求出错'));\n        }\n    });\n}\n\n// 保存微信用户信息\nfunction saveWechatUserInfo(openid, userInfo) {\n    return new Promise((resolve, reject) => {\n        try {\n            // 存储用户信息到本地\n            uni.setStorageSync('userInfo', userInfo);\n            \n            // 调用云函数保存到数据库\n            uniCloud.callFunction({\n                name: 'user-service',\n                data: {\n                    action: 'saveWxUserInfo',\n                    params: {\n                        openid: openid,\n                        userInfo: userInfo\n                    }\n                },\n                success: (res) => {\n                    try {\n                        if (!res.result || res.result.code !== 0) {\n                            const errMsg = (res.result && res.result.message) ? res.result.message : '保存用户信息失败';\n                            reject(new Error(errMsg));\n                            return;\n                        }\n                        \n                        resolve({\n                            userId: res.result.data.userId,\n                            isNew: res.result.data.isNew\n                        });\n                    } catch (e) {\n                        console.error('处理保存用户信息响应出错', e);\n                        reject(e instanceof Error ? e : new Error('处理保存用户信息响应出错'));\n                    }\n                },\n                fail: (err) => {\n                    console.error('调用保存用户信息云函数失败', err);\n                    reject(err instanceof Error ? err : new Error('调用保存用户信息云函数失败'));\n                }\n            });\n        } catch (e) {\n            console.error('保存用户信息过程出错', e);\n            reject(e instanceof Error ? e : new Error('保存用户信息过程出错'));\n        }\n    });\n}\n\n// 检查用户是否授权\nexport function checkAuthSetting(scope) {\n    return new Promise((resolve) => {\n        try {\n            // #ifdef MP-WEIXIN\n            uni.getSetting({\n                success: (res) => {\n                    try {\n                        resolve(!!res.authSetting[scope]);\n                    } catch (e) {\n                        console.error('处理授权设置响应出错', e);\n                        resolve(false);\n                    }\n                },\n                fail: () => {\n                    resolve(false);\n                }\n            });\n            // #endif\n            \n            // #ifndef MP-WEIXIN\n            resolve(false);\n            // #endif\n        } catch (e) {\n            console.error('获取授权设置过程出错', e);\n            resolve(false);\n        }\n    });\n}\n\n// 微信分享\nexport function shareToWechat(options = {}) {\n    try {\n        // #ifdef MP-WEIXIN\n        uni.showShareMenu({\n            withShareTicket: true,\n            menus: ['shareAppMessage', 'shareTimeline']\n        });\n        \n        const defaultOptions = {\n            title: '血糖检测小程序',\n            path: '/pages/index/index',\n            imageUrl: '/static/logo.png'\n        };\n        \n        const shareOptions = Object.assign({}, defaultOptions, options);\n        \n        // 设置分享内容\n        uni.onShareAppMessage(() => {\n            return {\n                title: shareOptions.title,\n                path: shareOptions.path,\n                imageUrl: shareOptions.imageUrl\n            };\n        });\n        \n        // 设置分享到朋友圈\n        if (typeof uni.onShareTimeline === 'function') {\n            uni.onShareTimeline(() => {\n                return {\n                    title: shareOptions.title,\n                    path: shareOptions.path,\n                    imageUrl: shareOptions.imageUrl\n                };\n            });\n        }\n        // #endif\n    } catch (e) {\n        console.error('设置分享选项出错', e);\n    }\n}\n\nexport default {\n    isWechatMP,\n    getWechatLoginState,\n    wechatLogin,\n    checkAuthSetting,\n    shareToWechat\n}; "],"names":["uni","uniCloud"],"mappings":"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"}