{"version":3,"file":"wechat.js","sources":["common/api/wechat.js"],"sourcesContent":["/**\r\n * 微信相关API工具类\r\n */\r\n\r\n// 检查是否微信小程序环境\r\nexport function isWechatMP() {\r\n    // #ifdef MP-WEIXIN\r\n    return true;\r\n    // #endif\r\n    \r\n    // #ifndef MP-WEIXIN\r\n    return false;\r\n    // #endif\r\n}\r\n\r\n// 获取微信登录状态\r\nexport function getWechatLoginState() {\r\n    try {\r\n        const openid = uni.getStorageSync('openid');\r\n        const userInfo = uni.getStorageSync('userInfo');\r\n        \r\n        return {\r\n            isLoggedIn: !!openid,\r\n            openid: openid || '',\r\n            userInfo: userInfo || null\r\n        };\r\n    } catch (e) {\r\n        console.error('获取登录状态失败', e);\r\n        return {\r\n            isLoggedIn: false,\r\n            openid: '',\r\n            userInfo: null\r\n        };\r\n    }\r\n}\r\n\r\n// 微信登录\r\nexport function wechatLogin() {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            // #ifdef MP-WEIXIN\r\n            uni.login({\r\n                provider: 'weixin',\r\n                success: (loginRes) => {\r\n                    console.log(loginRes);\r\n                    \r\n                    try {\r\n                        // 获取openid\r\n                        getWechatOpenid(loginRes.code)\r\n                            .then(openidRes => {\r\n                                try {\r\n                                    // 获取用户信息\r\n                                    uni.getUserProfile({\r\n                                        desc: '用于完善会员资料',\r\n                                        success: (userInfoRes) => {\r\n                                            try {\r\n                                                // 保存用户信息\r\n                                                saveWechatUserInfo(openidRes.openid, userInfoRes.userInfo)\r\n                                                    .then(saveRes => {\r\n                                                        // 直接使用wx-login返回的isAdmin状态\r\n                                                        resolve({\r\n                                                            openid: openidRes.openid,\r\n                                                            userInfo: userInfoRes.userInfo,\r\n                                                            userId: saveRes.userId,\r\n                                                            isAdmin: openidRes.isAdmin || false\r\n                                                        });\r\n                                                    })\r\n                                                    .catch(err => {\r\n                                                        console.error('保存用户信息失败', err);\r\n                                                        reject(err instanceof Error ? err : new Error('保存用户信息失败'));\r\n                                                    });\r\n                                            } catch (e) {\r\n                                                console.error('处理用户信息出错', e);\r\n                                                reject(e instanceof Error ? e : new Error('处理用户信息出错'));\r\n                                            }\r\n                                        },\r\n                                        fail: (err) => {\r\n                                            console.error('获取用户信息失败', err);\r\n                                            reject(err instanceof Error ? err : new Error('获取用户信息失败'));\r\n                                        }\r\n                                    });\r\n                                } catch (e) {\r\n                                    console.error('获取用户信息出错', e);\r\n                                    reject(e instanceof Error ? e : new Error('获取用户信息出错'));\r\n                                }\r\n                            })\r\n                            .catch(err => {\r\n                                console.error('获取openid失败', err);\r\n                                reject(err instanceof Error ? err : new Error('获取openid失败'));\r\n                            });\r\n                    } catch (e) {\r\n                        console.error('调用登录方法出错', e);\r\n                        reject(e instanceof Error ? e : new Error('调用登录方法出错'));\r\n                    }\r\n                },\r\n                fail: (err) => {\r\n                    console.error('微信登录失败', err);\r\n                    reject(err instanceof Error ? err : new Error('微信登录失败'));\r\n                }\r\n            });\r\n            // #endif\r\n            \r\n            // #ifndef MP-WEIXIN\r\n            reject(new Error('仅支持微信小程序环境'));\r\n            // #endif\r\n        } catch (e) {\r\n            console.error('微信登录过程出错', e);\r\n            reject(e instanceof Error ? e : new Error('微信登录过程出错'));\r\n        }\r\n    });\r\n}\r\n\r\n// 获取微信OpenID\r\nfunction getWechatOpenid(code) {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            console.log(code);\r\n            \r\n            uni.request({\r\n                url: 'https://97fca9f2-41f6-449f-a35e-3f135d4c3875.bspapp.com/http/user-center',\r\n                method: 'POST',\r\n                data: {\r\n                    action: 'loginByWeixin',\r\n                    params: {\r\n                        code: code,\r\n                        platform: 'mp-weixin'\r\n                    }\r\n                },\r\n                success: (res) => {\r\n                    console.log(res);\r\n                    \r\n                    try {\r\n                        if (!res.data || res.data.code !== 0) {\r\n                            const errMsg = (res.data && res.data.errMsg) ? res.data.errMsg : '获取openid失败';\r\n                            reject(new Error(errMsg));\r\n                            return;\r\n                        }\r\n                        \r\n                        // 存储openid\r\n                        uni.setStorageSync('openid', res.data.openid);\r\n                        resolve({\r\n                            openid: res.data.openid,\r\n                            isAdmin: res.data.isAdmin\r\n                        });\r\n                    } catch (e) {\r\n                        console.error('处理获取openid响应出错', e);\r\n                        reject(e instanceof Error ? e : new Error('处理获取openid响应出错'));\r\n                    }\r\n                },\r\n                fail: (err) => {\r\n                    console.error('请求获取openid失败', err);\r\n                    reject(err instanceof Error ? err : new Error('请求获取openid失败'));\r\n                }\r\n            });\r\n        } catch (e) {\r\n            console.error('发送获取openid请求出错', e);\r\n            reject(e instanceof Error ? e : new Error('发送获取openid请求出错'));\r\n        }\r\n    });\r\n}\r\n\r\n// 保存微信用户信息\r\nfunction saveWechatUserInfo(openid, userInfo) {\r\n    return new Promise((resolve, reject) => {\r\n        try {\r\n            // 存储用户信息到本地\r\n            uni.setStorageSync('userInfo', userInfo);\r\n            \r\n            // 调用云函数保存到数据库\r\n            uniCloud.callFunction({\r\n                name: 'user-service',\r\n                data: {\r\n                    action: 'saveWxUserInfo',\r\n                    params: {\r\n                        openid: openid,\r\n                        userInfo: userInfo\r\n                    }\r\n                },\r\n                success: (res) => {\r\n                    try {\r\n                        if (!res.result || res.result.code !== 0) {\r\n                            const errMsg = (res.result && res.result.message) ? res.result.message : '保存用户信息失败';\r\n                            reject(new Error(errMsg));\r\n                            return;\r\n                        }\r\n                        \r\n                        resolve({\r\n                            userId: res.result.data.userId,\r\n                            isNew: res.result.data.isNew\r\n                        });\r\n                    } catch (e) {\r\n                        console.error('处理保存用户信息响应出错', e);\r\n                        reject(e instanceof Error ? e : new Error('处理保存用户信息响应出错'));\r\n                    }\r\n                },\r\n                fail: (err) => {\r\n                    console.error('调用保存用户信息云函数失败', err);\r\n                    reject(err instanceof Error ? err : new Error('调用保存用户信息云函数失败'));\r\n                }\r\n            });\r\n        } catch (e) {\r\n            console.error('保存用户信息过程出错', e);\r\n            reject(e instanceof Error ? e : new Error('保存用户信息过程出错'));\r\n        }\r\n    });\r\n}\r\n\r\n// 检查用户是否授权\r\nexport function checkAuthSetting(scope) {\r\n    return new Promise((resolve) => {\r\n        try {\r\n            // #ifdef MP-WEIXIN\r\n            uni.getSetting({\r\n                success: (res) => {\r\n                    try {\r\n                        resolve(!!res.authSetting[scope]);\r\n                    } catch (e) {\r\n                        console.error('处理授权设置响应出错', e);\r\n                        resolve(false);\r\n                    }\r\n                },\r\n                fail: () => {\r\n                    resolve(false);\r\n                }\r\n            });\r\n            // #endif\r\n            \r\n            // #ifndef MP-WEIXIN\r\n            resolve(false);\r\n            // #endif\r\n        } catch (e) {\r\n            console.error('获取授权设置过程出错', e);\r\n            resolve(false);\r\n        }\r\n    });\r\n}\r\n\r\n// 微信分享\r\nexport function shareToWechat(options = {}) {\r\n    try {\r\n        // #ifdef MP-WEIXIN\r\n        uni.showShareMenu({\r\n            withShareTicket: true,\r\n            menus: ['shareAppMessage', 'shareTimeline']\r\n        });\r\n        \r\n        const defaultOptions = {\r\n            title: '血糖检测小程序',\r\n            path: '/pages/index/index',\r\n            imageUrl: '/static/logo.png'\r\n        };\r\n        \r\n        const shareOptions = Object.assign({}, defaultOptions, options);\r\n        \r\n        // 设置分享内容\r\n        uni.onShareAppMessage(() => {\r\n            return {\r\n                title: shareOptions.title,\r\n                path: shareOptions.path,\r\n                imageUrl: shareOptions.imageUrl\r\n            };\r\n        });\r\n        \r\n        // 设置分享到朋友圈\r\n        if (typeof uni.onShareTimeline === 'function') {\r\n            uni.onShareTimeline(() => {\r\n                return {\r\n                    title: shareOptions.title,\r\n                    path: shareOptions.path,\r\n                    imageUrl: shareOptions.imageUrl\r\n                };\r\n            });\r\n        }\r\n        // #endif\r\n    } catch (e) {\r\n        console.error('设置分享选项出错', e);\r\n    }\r\n}\r\n\r\nexport default {\r\n    isWechatMP,\r\n    getWechatLoginState,\r\n    wechatLogin,\r\n    checkAuthSetting,\r\n    shareToWechat\r\n}; "],"names":["uni","uniCloud"],"mappings":"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"}